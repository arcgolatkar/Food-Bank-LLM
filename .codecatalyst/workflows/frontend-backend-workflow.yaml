Name: FoodBankChatbotPipeline
SchemaVersion: 1.0

# Define triggers for the workflow
Triggers:
  - Type: PUSH
    Branches:
      - cfn

# Define the workflow actions
Actions:
  # ========== Backend Build & Deploy ==========
  BuildBackendImage:
    Identifier: aws/build@v1
    Inputs:
      Sources:
        - WorkflowSource
      Variables:
        - Name: REGION
          Value: us-east-1
        - Name: ACCOUNT_ID
          Value: 727646504965
        - Name: BACKEND_REPO_NAME
          Value: foodbank-backend-v2

    Environment:
      Name: dev
      Connections:
        - Name: srinikeths
          Role: CodeCatalystWorkflowDevelopmentRole-foodBank605
    Configuration:
      Steps:
        - Run: |
            cd backend
            aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com
            docker build -t $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$BACKEND_REPO_NAME:latest .
            docker push $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$BACKEND_REPO_NAME:latest
            echo "::set-output name=BACKEND_IMAGE_TAG::latest"
    Outputs:
      Variables:
        - BACKEND_IMAGE_TAG
        - BACKEND_REPO_NAME
      AutoDiscoverReports:
        Enabled: true
        ReportNamePrefix: rptBuildBackend

  DeployBackendCloudFormation:
    Identifier: aws/cfn-deploy@v1
    DependsOn:
      - BuildBackendImage
    Inputs:
      Sources:
        - WorkflowSource
      Variables:
        - Name: REGION
          Value: us-east-1
        - Name: ACCOUNT_ID
          Value: 727646504965
    Environment:
        Name: dev
        Connections:
          - Name: srinikeths
            Role: CodeCatalystWorkflowDevelopmentRole-foodBank605
    Configuration:
      region: $REGION
      name: foodbackendstack
      template: backend/backend-template.yaml
      capabilities: CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND
      # RoleArn: arn:aws:iam::$ACCOUNT_ID:role/CodeCatalystWorkflowDevelopmentRole-us-east-1
      parameter-overrides: |
        VpcId=vpc-0e9988863d4f4c11b,
        PublicSubnet1=subnet-02ae40e988bb1c79c,
        PublicSubnet2=subnet-0e7baca72e0702301,
        PrivateSubnet1=subnet-02ae40e988bb1c79c,
        PrivateSubnet2=subnet-0e7baca72e0702301,
        OpenAIApiKey=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,
        ECRRepositoryURI=727646504965.dkr.ecr.us-east-1.amazonaws.com/$BuildBackendImage.BACKEND_REPO_NAME,
        ContainerImage=latest
    Outputs:
      Variables:
        - BACKEND_URL

  # ========== Frontend Build & Deploy ==========
  BuildFrontendImage:
    Identifier: aws/build@v1
    Inputs:
      Sources:
        - WorkflowSource
      Variables:
        - Name: REGION
          Value: us-east-1
        - Name: ACCOUNT_ID
          Value: 727646504965
        - Name: FRONTEND_REPO_NAME
          Value: foodbank-frontend-v2
    Environment:
      Name: dev
      Connections:
        - Name: srinikeths
          Role: CodeCatalystWorkflowDevelopmentRole-foodBank605
    Configuration:
      Steps:
        - Run: |
            cd frontend
            aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com
            docker build -t $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$FRONTEND_REPO_NAME:latest .
            docker push $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$FRONTEND_REPO_NAME:latest
            echo "::set-output name=FRONTEND_IMAGE_TAG::latest"
    Outputs:
      AutoDiscoverReports:
        Enabled: true
        ReportNamePrefix: rptBuildFrontend
      Variables:
        - FRONTEND_IMAGE_TAG
        - FRONTEND_REPO_NAME

  DeployFrontendCloudFormation:
    Identifier: aws/cfn-deploy@v1
    DependsOn:
      - BuildFrontendImage
      - DeployBackendCloudFormation
    Inputs:
      Sources:
        - WorkflowSource
      Variables:
        - Name: REGION
          Value: us-east-1
        - Name: ACCOUNT_ID
          Value: 727646504965
        - Name: FRONTEND_REPO_NAME
          Value: foodbank-frontend-v2
        # - Name: FRONTEND_IMAGE_TAG
        #   From: BuildFrontendImage
        # - Name: BACKEND_URL
        #   From: DeployBackendCloudFormation
    Environment:
      Name: dev
      Connections:
        - Name: srinikeths
          Role: CodeCatalystWorkflowDevelopmentRole-foodBank605
    Configuration:
      region: $REGION
      name: foodfrontendstack
      template: frontend/frontend-template.yaml
      capabilities: CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND
      # RoleArn: arn:aws:iam::$ACCOUNT_ID:role/CodeCatalystWorkflowDevelopmentRole-us-east-1
      parameter-overrides: |
        ParameterKey=VpcId,ParameterValue=vpc-0e9988863d4f4c11b \
        ParameterKey=PublicSubnet1,ParameterValue=subnet-02ae40e988bb1c79c \
        ParameterKey=PublicSubnet2,ParameterValue=subnet-0e7baca72e0702301 \
        ParameterKey=ECRRepositoryURI,ParameterValue=727646504965.dkr.ecr.us-east-1.amazonaws.com/foodbank-frontend-v2 \
        ParameterKey=ContainerImage,ParameterValue=latest \
        ParameterKey=BackendURL,ParameterValue= $DeployBackendCloudFormation.BACKEND_URL

  # ========== Verification ==========
  # VerifyDeployment:
  #   Identifier: aws/cli@v1
  #   DependsOn:
  #     - DeployFrontendCloudFormation
  #   Inputs:
  #     Sources:
  #       - WorkflowSource
  #     Variables:
  #       - Name: REGION
  #         Value: us-east-1
  #       - Name: ACCOUNT_ID
  #         Value: 727646504965
  #       - Name: BACKEND_URL
  #         From: DeployBackendCloudFormation
  #   Environment:
  #       Name: dev
  #       Connections:
  #         - Name: srinikeths
  #           Role: CodeCatalystWorkflowDevelopmentRole-foodBank605
  #   Configuration:
  #     Steps:
  #       - Run: |
  #           echo "Verifying backend health..."
  #           # Try up to 5 times with 10 second sleep in between
  #           for i in {1..5}; do
  #             resp=$(curl -s ${BACKEND_URL}/api/health || echo "")
  #             if echo "$resp" | grep -q "healthy"; then
  #               echo "Backend health check successful!"
  #               break
  #             else
  #               echo "Backend not healthy yet, waiting 10 seconds..."
  #               sleep 10
  #             fi
  #             if [ $i -eq 5 ]; then
  #               echo "Failed to verify backend health."
  #               exit 1
  #             fi
  #           done
            
  #           echo "Verifying ECS services..."
  #           # Check backend service
  #           aws ecs describe-services --cluster $FoodBankCluster --services $foodbank-backend-v10 --region $REGION
            
  #           # Check frontend service
  #           aws ecs describe-services --cluster $FoodBankFrontendCluster --services $foodbank-frontend-v10 --region $REGION
            
  #           echo "Deployment verification complete!"