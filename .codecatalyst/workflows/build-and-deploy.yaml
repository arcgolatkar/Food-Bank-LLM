Name: BuildAndDeployPipeline
SchemaVersion: 1.0

Triggers:
  - Type: PUSH
    Branches:
      - cfn # Trigger workflow on pushes to the main branch

Actions:
  # 1. Build Backend Docker Image and Push to ECR
  BuildBackendImage:
    Identifier: aws/build@v1
    Inputs:
      Sources:
        - WorkflowSource
    Outputs:
      AutoDiscoverReports:
        Enabled: true
        ReportNamePrefix: rptBuildBackend
    Configuration:
      Steps:
        - Run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
        - Run: docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/my-app-backend:$CODECATALYST_SOURCE_REVISION_git_FullHash backend/
        - Run: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/my-app-backend:$CODECATALYST_SOURCE_REVISION_git_FullHash
    #   Container:
    #     Image: public.ecr.aws/aws-cli/aws-cli:latest
    #     RegistryCredentialSource: CodeCatalystEnvironment
    Environment:
      Name: dev
      Connections:
        - Name: srinikeths
          Role: CodeCatalystWorkflowDevelopmentRole-foodBank605
    Compute:
      Type: EC2

  # 2. Build Frontend Docker Image and Push to ECR
  BuildFrontendImage:
    Identifier: aws/build@v1
    Inputs:
      Sources:
        - WorkflowSource
    Outputs:
      AutoDiscoverReports:
        Enabled: true
        ReportNamePrefix: rptBuildFrontend
    Configuration:
      Steps:
        - Run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
        - Run: docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/my-app-frontend:$CODECATALYST_SOURCE_REVISION_git_FullHash frontend/
        - Run: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/my-app-frontend:$CODECATALYST_SOURCE_REVISION_git_FullHash
      # Container:
      #   Image: public.ecr.aws/aws-cli/aws-cli:latest
      #   RegistryCredentialSource: CodeCatalystEnvironment
    Environment:
      Name: dev
      Connections:
        - Name: srinikeths
          Role: CodeCatalystWorkflowDevelopmentRole-foodBank605
    Compute:
      Type: EC2

  # 3. Deploy Backend Infrastructure and Application Update
  DeployBackendStack:
    Identifier: aws/cfn-deploy@v1
    DependsOn:
      - BuildBackendImage
    Inputs:
      Sources:
        - WorkflowSource
    Environment:
        Name: dev
        Connections:
          - Name: srinikeths
            Role: CodeCatalystWorkflowDevelopmentRole-foodBank605
    Configuration:
      Parameters:
        region: $AWS_REGION
        name: 'my-app-backend-dev'
        template: backend/template.yaml
      # --- Corrected Parameters format ---
        # Use standard YAML map format
        # VpcId: <YOUR_VPC_ID> # Replace with actual ID or lookup
        # Pass list parameters as a comma-delimited string
        # SubnetIds: '<SUBNET_ID_1>,<SUBNET_ID_2>' # Replace with actual IDs or lookup
        # ImageUrl: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/my-app-backend:$CODECATALYST_SOURCE_REVISION_git_FullHash
        capabilities: CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND
        # Ensure your backend/template.yaml expects SubnetIds as 'List<AWS::EC2::Subnet::Id>'
        # The CFN service automatically converts the comma-delimited string to a list for the template.

  # 4. Deploy Frontend Infrastructure and Application Update
  DeployFrontendStack:
    Identifier: aws/cfn-deploy@v1
    DependsOn:
      - BuildFrontendImage
    Inputs:
      Sources:
        - WorkflowSource
    Environment:
        Name: dev
        Connections:
          - Name: srinikeths
            Role: CodeCatalystWorkflowDevelopmentRole-foodBank605
    Configuration:
      # --- Corrected Parameters format ---
      Parameters:
        region: $AWS_REGION
        name: 'my-app-frontend-dev'
        template: frontend/template.yaml
        # VpcId: <YOUR_VPC_ID>
        # # Pass list parameters as a comma-delimited string
        # SubnetIds: '<SUBNET_ID_1>,<SUBNET_ID_2>' # Use public subnets if using internet-facing ALB
        # ImageUrl: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/my-app-frontend:$CODECATALYST_SOURCE_REVISION_git_FullHash
        capabilities: CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_AUTO_EXPAND
        # Ensure your frontend/template.yaml expects SubnetIds as 'List<AWS::EC2::Subnet::Id>'

  # 5. Force New ECS Deployment for Backend
  ForceBackendDeploy:
    Identifier: aws/build@v1
    DependsOn:
      - DeployBackendStack
    Inputs:
      Sources: []
    Environment:
        Name: dev
        Connections:
          - Name: srinikeths
            Role: CodeCatalystWorkflowDevelopmentRole-foodBank605
    Compute:
      Type: EC2
    Configuration:
      Steps:
        - Run: |
            SERVICE_NAME=$(aws cloudformation describe-stacks --stack-name my-app-backend-dev --query "Stacks[0].Outputs[?OutputKey=='BackendServiceName'].OutputValue" --output text --region $AWS_REGION)
            CLUSTER_NAME='dev-cluster' # IMPORTANT: Make sure this matches your actual cluster name
            if [ -z "$SERVICE_NAME" ]; then echo "Error: Could not find BackendServiceName output for stack my-app-backend-dev"; exit 1; fi
            echo "Forcing new deployment for service: $SERVICE_NAME in cluster $CLUSTER_NAME"
            aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment --region $AWS_REGION
      Container:
         Image: public.ecr.aws/aws-cli/aws-cli:latest

  # 6. Force New ECS Deployment for Frontend
  ForceFrontendDeploy:
     Identifier: aws/build@v1
     DependsOn:
       - DeployFrontendStack
     Inputs:
       Sources: []
     Environment:
         Name: dev
         Connections:
           - Name: srinikeths
             Role: CodeCatalystWorkflowDevelopmentRole-foodBank605
     Compute:
       Type: EC2
     Configuration:
       Steps:
         - Run: |
             SERVICE_NAME=$(aws cloudformation describe-stacks --stack-name my-app-frontend-dev --query "Stacks[0].Outputs[?OutputKey=='FrontendServiceName'].OutputValue" --output text --region $AWS_REGION)
             CLUSTER_NAME='dev-cluster' # IMPORTANT: Make sure this matches your actual cluster name
             if [ -z "$SERVICE_NAME" ]; then echo "Error: Could not find FrontendServiceName output for stack my-app-frontend-dev"; exit 1; fi
             echo "Forcing new deployment for service: $SERVICE_NAME in cluster $CLUSTER_NAME"
             aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment --region $AWS_REGION
       Container:
         Image: public.ecr.aws/aws-cli/aws-cli:latest